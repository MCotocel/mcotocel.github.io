#+title: Moving from Homebrew to Nix

* Intro

Recently, I (mostly) ditched [[https://brew.sh/][Homebrew]] in favor of [[https://nixos.org/][Nix]]. For those who don't know, Nix is a reproducible, declarative package manager, so if a package works on a certain machine, it /will/ work on other machines as well. You can also easily share build environments for projects.

* Getting started

I'd recommend making a list of packages installed by Homebrew by running ~brew list > brew_installed.txt~

Then, to uninstall Homebrew and all installed packages, run:

#+begin_src sh
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"
#+end_src

Additionally, you may want to remove leftover files with ~sudo rm -rf /usr/local/*~.

Then, install the Nix package manager with the following command:

#+begin_src sh 
  sh <(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume
#+end_src

You can now install packages with ~nix-env -i <package>~, and uninstall with ~nix-env -e <package>~.

* Home manager

Home-manager allows you to manage your home environment with Nix. You can install it and set it up with the following commands:

#+begin_src sh 
  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  nix-channel --update
  export NIX_PATH=$HOME/.nix-defexpr/channels${NIX_PATH:+:}$NIX_PATH
  nix-shell '<home-manager>' -A install
#+end_src

You can create or edit the configuration file in ~~/.config/nixpkgs/home.nix~.

A simple configuration would be similar to the following:

#+begin_src nix
  { config, pkgs, lib, ... }:

  {
    programs.home-manager.enable = true; # Enables home-manager

    programs.git = {                      # Configuration for git
      enable = true;                      # Enable
      userName = "Matei Cotocel";         # Set name
      userEmail = "mcotocel@outlook.com"; # Set email
    };

    home.username = "matei";            # Your username
    home.homeDirectory = "/home/matei"; # Your home directory

    home.file = {
      ".Xresources".source = ../../config/xresources; # Copy xresources from the directory ../../config/xresources to your home directory
      ".zshrc".source      = ../../config/zshrc;      # Copy zshrc from the directory ../../config/zshrc to your home directory
    };

    home.stateVersion = "21.11"; # Don't change this
  }
#+end_src

To switch to the configuration, run ~home-manager switch~. If your config file is not in the default location, use the ~-f~ flag to specify the location.

* Nix-darwin

NixOS has a ~configuration.nix~ file to customize the OS. nix-darwin is a module for Nix that allows you to use something similar to ~configuration.nix~ on macOS.

Install it with these commands:

#+begin_src sh 
  nix-build https://github.com/LnL7/nix-darwin/archive/master.tar.gz -A installer
  ./result/bin/darwin-installer
#+end_src


The configuration file is located in ~~/.nixpkgs/darwin-configuration.nix~.

A simple configuration would look like this:

#+begin_src nix 
  { config, pkgs, ... }:

  {

    nixpkgs.config.allowUnfree = true; # Allow unfree packages. Sorry Stallman

    environment.systemPackages = [ # Ensure these packages are installed
      pkgs.vim
      pkgs.emacs
    ];

    services.nix-daemon.enable = false; # Disable daemon

    programs.zsh.enable = true; # Set shell to zsh

    system.stateVersion = 4; # Used for backwards compatibility 

    services.yabai = { # Configure yabai
      enable = true;                   # Enable it
      package = pkgs.yabai;            # Set the packages
      enableScriptingAddition = false; # Disable scripting addition
      config = {
        window_placement = "second_child"; # Set your configuration here like so
      };

      # Extra configuration for yabai
      extraConfig = ''
          yabai -m rule --add app="^System Preferences$" manage=off
          yabai -m rule --add app="^Keka$" manage=off
          yabai -m rule --add app="^Digital Color Meter$" manage=off
          yabai -m rule --add app="^Latest$" manage=off
          yabai -m rule --add app="^Stickies$" manage=off
          yabai -m rule --add app="^GIMP" manage=off
          skhd &
        '';
      };
  }
#+end_src

Switching to the configuration is done with ~darwin-rebuild switch~.

* Conclusion

Overall, I find Nix to be more powerful and extensible than Homebrew is. However, some packages don't work or install on macOS due to various issues, such as a dependency not passing tests. For these cases, I have Homebrew installed to use packages that don't work with Nix.
